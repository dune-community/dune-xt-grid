// This file is part of the dune-xt-grid project:
//   https://github.com/dune-community/dune-xt-grid
// The copyright lies with the authors of this file (see below).
// License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
//      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
//          with "runtime exception" (http://www.dune-project.org/license.html)
// Authors:
//   Felix Schindler (2016)

#ifndef DUNE_XT_GRID_GRIDPROVIDER_PBH
#define DUNE_XT_GRID_GRIDPROVIDER_PBH
#if HAVE_DUNE_PYBINDXI

#include <dune/pybindxi/pybind11.h>
#include <dune/pybindxi/stl.h>

#include "gridprovider.hh"

namespace Dune {
namespace XT {
namespace Grid {


template <class G>
pybind11::class_<GridProvider<G>> bind_GridProvider(pybind11::module& m, const std::string& grid_id)
{
  namespace py = pybind11;
  using namespace pybind11::literals;

  typedef GridProvider<G> C;

  py::class_<C> c(m, std::string("GridProvider__" + grid_id).c_str(), std::string("GridProvider__" + grid_id).c_str());

  c.def("max_level", &C::max_level);
  c.def("global_refine", &C::global_refine, "count"_a);
  c.def("visualize",
        [](const C& self, const std::string& filename, const Common::Configuration& boundary_info_cfg) {
          self.visualize(filename, boundary_info_cfg);
        },
        "filename"_a = C::static_id(),
        "boundary_info_cfg"_a = Common::Configuration());

  c.def_property_readonly("grid_type", [grid_id](const C& /*self*/) { return grid_id; });
  c.def_property_readonly("dim", [](const C& /*self*/) { return C::dimDomain; });

  return c;
} // ... bind_GridProvider(...)


template <class G>
void bind_make_cube_grid(pybind11::module& m, const std::string& grid_id)
{
  namespace py = pybind11;
  using namespace pybind11::literals;

  typedef GridProvider<G> GridProviderType;

  m.def(std::string("make_cube_grid__" + grid_id).c_str(),
        (GridProviderType(*)(const Common::Configuration&))make_cube_grid<G>,
        "cfg"_a = cube_gridprovider_default_config());

  m.def(
      std::string("make_cube_grid__" + grid_id).c_str(),
      (GridProviderType(*)(const typename G::ctype&,
                           const typename G::ctype&,
                           const unsigned int,
                           const unsigned int,
                           const unsigned int))make_cube_grid<G>,
      "lower_left"_a,
      "upper_right"_a,
      "num_elements"_a = cube_gridprovider_default_config().template get<std::vector<unsigned int>>("num_elements")[0],
      "num_refinements"_a = cube_gridprovider_default_config().template get<unsigned int>("num_refinements"),
      "overlap_size"_a = cube_gridprovider_default_config().template get<std::vector<unsigned int>>("overlap_size")[0]);

  m.def(
      std::string("make_cube_grid__" + grid_id).c_str(),
      (GridProviderType(*)(const FieldVector<typename G::ctype, G::dimension>&,
                           const FieldVector<typename G::ctype, G::dimension>&,
                           const std::array<unsigned int, G::dimension>,
                           const unsigned int,
                           const std::array<unsigned int, G::dimension>))make_cube_grid<G>,
      "lower_left"_a,
      "upper_right"_a,
      "num_elements"_a = cube_gridprovider_default_config().template get<std::vector<unsigned int>>("num_elements")[0],
      "num_refinements"_a = cube_gridprovider_default_config().template get<unsigned int>("num_refinements"),
      "overlap_size"_a = cube_gridprovider_default_config().template get<std::vector<unsigned int>>("overlap_size")[0]);

} // ... bind_make_cube_grid(...)


} // namespace Grid
} // namespace XT
} // namespace Dune

#endif // HAVE_DUNE_PYBINDXI
#endif // DUNE_XT_GRID_GRIDPROVIDER_PBH
